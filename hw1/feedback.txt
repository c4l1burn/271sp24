It's good you talked to Indi whose a pro.

I made a number of changes to your code to get it to run, show anything, and remove some obvious errors arising from misunderstanding C types. Here's the diff:

This feels kinda like it should have some vaguely high grade that isn't a 100, like a 90 or something.

90/100

Good job!


3a4,5
> 
> //Created with invaluable assistance from Indi
10,11d11
< //okay so each entry will be a [size, size, o to 3]
< //you can treat a mallocced region as an array of characters
14,18c14
< 	int i, j, k;
< 
< 
< 	unsigned char ***base_x = malloc(sizeof(unsigned char **) * size);
< 	// this creates an unsinged char pointer which points to a region of memory broken up into char sized chunks which is size big
---
> 	unsigned char *** base = malloc(sizeof(unsigned char **) * size) ;
20,28c16,23
< 	for (i=0; i < size; i++)
< 	{
< 		base_x[i] = malloc(sizeof(unsigned char *) * size);
< 		for (j=0; j < size; j++)
< 		{
< 			base_x[i][j] = malloc(sizeof(unsigned char) * 3);
< 			for (k=0; k < 3; k++)
< 			{
< 				base_x[i][j][k] = 0;
---
> 	for (int i = 0; i < size; i++) {
>         unsigned char ** row = malloc(sizeof(unsigned char *) * size);
> 		for (int j = 0; j < size; j++){
> 			unsigned char * pixel = malloc(sizeof(unsigned char) * 3);
> 			pixel[0] = 0;
> 			pixel[1] = 0;
> 			pixel[2] = 0;
> 			row[j] = pixel;
30,33c25
< 		}
< 	}
< 	//the array should be of unsinged char *s, each of which point to an unsinged char **, each of which
< 
---
> 		base[i] = row;
35,36c27,28
< 	// THIS MAY BE FUCKED UP AND I MIGHT NEED ANOTHER LAYER?? // it's probably fine
< 	return base_x;
---
> 	}
> 	return base ;
40d31
< 	// z = z^2 + c
46,49c37,42
< 	//double a = 0, b = 0;
< 	//double complex r = a + b * I;
< 	double complex r = (z_n * z_n) + c;
< 	return r;
---
> 	// double a = 0, b = 0;
> 	// double complex r = a + b * I;
> 	// return r;
> 	return z_n * z_n + c ; 
> 
> 
54,56d46
< 
< // take in a complex number and the size of the base, output the coordinates of the complex number on that base array thing.
< // "output" means return the pointers after theyve been modified
59,63c49,54
< 	// there was a bunch of rounding in here that meant most pixels couldn't be set
< 	*x = (int)((creal(c) + 2.0) * (double)size / 4.0);
< 	*y = (int)((cimag(c) + 2.0) * (double)size / 4.0);
< 	//printf("got to c2b\n");
< 	fflush(stdout);
---
> 	*x = (int)((creal(c) + 2) * size / 4);
> 	*y = (int)((cimag(c) + 2) * size / 4);
> 	*x = (*x > size - 1) ? size-1 : *x;
> 	*y = (*y > size - 1) ? size-1 : *y;
> 	*x = (*x < 0) ? 0 : *x;
> 	*y = (*y < 0) ? 0 : *y;
72,73c63,64
< 
< 	double complex r = (((double)x * 4.0 / (double)size - 2.0) + (((double)y * 4.0 / (double)size - 2.0) * I));
---
> 	double a = (x * 4.0 / size - 2.0), b = (y * 4.0 / size - 2.0);
> 	double complex r = a + b * I;
75,79d65
< 	// does this make sense? Not to me. // you probably should cast more things to doubles
< 	// does it draw errors? Not yet!
< 
< 
< 
84,85d69
< 
< // okay this should be easy. just run m_seq  iters times and check if its greater than 2
87,89c71,73
< {	double complex z_n = c;
< 	int i = 0;
< 	for (i=0; i < iters ; i++)
---
> {
> 	double complex zn = c ;
> 	for (int i = 0; i<iters; i++)
91,92c75,76
< 		z_n = m_seq(z_n, c);
< 		if ((creal(c)*creal(c)) + (cimag(c)*cimag(c)) > 4) // custom thing that avoids a call to cabs. does the same thing though. // good
---
> 		zn = m_seq(zn, c); 
> 		if (cabs(zn) > 2)
94c78
< 			return 1; // True, value escapes within iters
---
> 			return 1; 
97,98c81,82
< 	return 0; // False, stays bounded
< } //were just gonna say one means "yes it escapes" and zero means "we're cool"
---
> 	return 0;
> }
101,109d84
< 	/**
< # Description:
< # Take a value c.
< # If it escapes within iters
< # Go through the escaping sequence and increment
< # the pixel value for each location passed through by the
< # sequence for the given color.
<  */
< 
112,114c87
< 	// "if it escapes within iters"
< 	// escapes already calls m_seq, no need to do it here
< 	//printf("got to one val\n");
---
> 	double complex zn = c; // we save the starting value
116c89
< 	{
---
> 		return;
118,130c91,107
< 		return; // if it doesnt escape, thats the mandelbrot set, thats not what were doing here
< 	}	// SIDENOTE COME BACK TO THIS TO MAKE A NORMAL MANDELBROT RENDERER BY SWITCHING THIS LATER
< 	else
< 	{
< 		//printf("got to else \n");
< 		// so if it escapes:
< 		// okay so escapes only tells you if it escapes -- we still have c and can iterate on it ourselves
< 		// methinks this seems like a lot of wasted work but what do i know
< 
< 		//okay so "go through the escaping sequence -- meaning m_seq until abs(c>2) or something like that
< 		// "incrememnt the pixel value) -- THE FINAL ARRAY POINTED TO BY THE Y POINTER FOR THE COLOR GIVEN TO US
< 		int i = 0;
< 		int x, y;
---
> 	for (int i = 0; i<iters; i++){
> 		if (cabs(zn) > 2)
> 			return;
> 		int x, y, v;	
> 		c2b(zn, size, &x, &y);
> 		
> 		x = (x > size - 1) ? size-1 : x; // prevent overflow
> 		y = (y > size - 1) ? size-1 : y; // prevent overflow
> 		v = base[x][y][color];
> 		v += 25;
> 		if( v > 255)
> 			v = 255;
> 		base[x][y][color] = v;
> 		zn = m_seq(zn, c);
> 	}
> 	return;
> }
132,146c109,117
< 		//("got past x y assignment \n");
< 		for (i=0; i < iters ; i++)
< 		{
< 			// the ampersands mean "the pointer to x"
< 			c2b(c, size, &x, &y);
< 			// use the ints at *x and *y as indicies in base
< 
< 			// CURRENT BASTARD ZONE
< 			// you aren't bounds checking x y. you should do that.
< 			x = x > size - 1 ? size - 1 : x ;
< 			y = y > size - 1 ? size - 1 : y ;
< 			//printf("%i\n", base[x][y][0]);
< 			//printf("Got to the bastard zone");
< 			//fflush(stdout);
< 			base[x][y][0] = 255 ; // changing this just so i can see stuff
---
> // in C, we accept a 3d array base, an integer for size and for iterations
> void get_colors(unsigned char ***base, int size, int iters)
> {
> 	
> 	int i_lst[3] = {iters, iters * 10, iters * 100};  // different iterations for each color
> 	for (int x = 0; x < size; x++){
> 		for (int y = 0; y < size; y++){
> 			for (int i = 0; i<3; i++)
> 				one_val(base, size, i_lst[i], i, b2c(size, x, y));
148,149d118
< 
< 	return;
150a120
> 	return;
167,199d136
< 	/**
< 	 * okay so to make a buddhabrot you need to:
< 	 * 1. Make a base with size size
< 	 * 2. iterate over every "entry" in that base and get complex numbers from those base entries using b2c
< 	 * 3. plug that complex number into one_val
< 	 * 		PROBLEM: No color val given. multiple solutions; you could assign them randomly, or in sequence, or based on how fast it escapes, or whatever
< 	 * 4. once you get to the end of the base, take the base and do some wizardry to make it a ppm
< 	 * 5. then do some more wizardry to make it a png.
< 	 *
< 	 *  easy!
< 	 *
< 	*/
< 	// creates the base, stores it in a triple pointer named base
< 	unsigned char ***base = create_base(size);
< 	printf("%p\n", base);
< 
< 	// TODO: number 2 in the above list
< 	// b2c takes size and an x and y coord. set x to i, set y to j
< 	int i, j;
< 	for (i=0; i<size; i++)
< 	{
< 		int b2c_x = i;
< 		for (j=0; j<size; j++)
< 		{
< 			int b2c_y = j;
< 			// gets the value c at x y
< 			double complex c = b2c(size, b2c_x, b2c_y);
< 			//printf("current complex:");
< 			//printf("%lf\n", c); // trying to print c as we go through it
< 			// we're just gonna set color to 2 for the moment to make it blue
< 			one_val(base, size, iters, 2, c);
< 		}
< 	}
202,203d138
< 	printf("%p\n", base);
< 
204a140,144
> 	static unsigned char color[3];
> 
> 	fflush(stdout);
> 	unsigned char ***base = create_base(size);
> 	get_colors(base, size, iters);
209,211c149,152
< 			// ah - it would be good to not just use zeros lol
< 			fprintf(stderr,"x: %d, y: %d, base[i][j][0]: %d\n", x, y, base[x][y][0]);
< 			fwrite(base[x][y], 1, 3, fp);
---
> 			color[0] = base[x][y][0];  /* red */
> 			color[1] = base[x][y][1];  /* green */
> 			color[2] = base[x][y][2];  /* blue */
> 			fwrite(color, 1, 3, fp);
218,219d158
< // core learning obj of buddhabrot: get you to maintain an array representing the complex plane
< 
223,233c162
< 	// a bunch of test code i dont quite wanna throw out yet:
< 
< 	//create_base(20);
< 	//double complex sample_complex = 0.5 + 1.9 * I;
< 	//int test_escape = escapes(sample_complex, 2);
< 	//printf("%i/n", test_escape);
< 
< 	//test brot:
< 	make_brot(100,10);
< 
< 	//make_brot(4000,50);
---
> 	make_brot(3500,50);
235c164
< }
---
> }
\ No newline at end of file
